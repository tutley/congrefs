var User = require('../models/user');

module.exports = {

   /**
    * This is going to be the main public facing page of a user's profile, based on their user id
    * which for now is autogenerated by mongodb but I may change to allow the user to create
    * their own unique string
    */
   // app.get('/:uid', user.viewProfile);
   viewProfile: function(req, res, next) {
      User.findOne({ '_id' : req.params.uid }, function(err, user) {
         if (err) {next(err);}
         if (user) {
            res.render('template.jade', {
               title: 'Congrefs: ' + user.displayName,
               user: user,
            });
         } else {
            res.render('template.jade', {
               title: 'Congrefs: Error',
            });
         }
      });
   },

   // app.get('/:uid/votes', user.viewVotes);
   viewVotes: function(req, res, next) {
      User.findOne({ '_id' : req.params.uid }, function(err, user) {
         if (err) {next(err);}
         if (user) {
            // TODO: Find all Votes first, then render
            res.render('template.jade', {
               title: 'Congrefs: ' + user.displayName + ' - Voting Record',
               user: user,
            });
         } else {
            res.render('template.jade', {
               title: 'Congrefs: Error',
            });
         }
      });
   },

   // app.get('/:uid/comments', user.viewComments);
   viewComments: function(req, res, next) {
      User.findOne({ '_id' : req.params.uid }, function(err, user) {
         if (err) {next(err);}
         if (user) {
            // TODO: Find all Comments first, then render
            res.render('template.jade', {
               title: 'Congrefs: ' + user.displayName + ' - Comments',
               user: user,
            });
         } else {
            res.render('template.jade', {
               title: 'Congrefs: Error',
            });
         }
      });
   },

         /** 
         *  These first functions are a continuation of the account creation process:
         *  1) Is the user already in the system with that social provider? data.profile.identifier
         *  2) If so, populate req.session.user and redirect to '/'
         *  3) If not, grab user email or proceed to email entry page
         *  4) If email already exists:
         *     a) Display account Merge page (ask user if they want to add this social login to existing acct)
         *     b) Upon completion, populate req.session.user and redirect to '/'
         *  5) If email doesn't already exist, add new user
         *     a) grab email from email entry page or data profile
         *     b) display new account page
         *     c) display full zip code entry/lookup form and explain why
         */
        

   // app.get('/register/email')
   // req.session.rpx has social profile information
   emailEntry: function(req, res, next) {
      res.render('inputEmail.jade', {
         title: 'Email Address for Congrefs',
         user: req.session.rpx
      });
   },

   // app.post('/register/email', top.emailSearch);
   emailSearch: function(req, res, next) {
      req.session.email = req.body['email'];
      // Search db for user based on email address
      User.findOne({ 'email' : req.body['email'] }, function(err, user) {
         if (err) { next(err); }
         if (user) {
            // user exists, display account merge page
            req.session.user = user;
            res.redirect('/register/merge');
         } else {
            // user does not exist
            res.redirect('/register/new');
         }
      });
   },

   // app.get('/register/merge')
   // req.session.rpx has new social profile information
   // req.session.user has current user profile
   merge: function(req, res, next) {
      res.render('mergeAccounts.jade', {
         title: 'Merge this Login to your Congrefs Account',
         user: req.session.user
      });
   },
   
   // app.post('/register/merge', top.mergePost);   
   mergePost: function(req, res, next) {
      User.update( {'_id': req.body['uid'] }, 
         { $push : { 'socialProfiles' : req.session.rpx } }, 
         function(err) {
         if (err) {next(err);}
         res.redirect('/account/view');
      });
   },

   // app.get('/register/new')
   // create a new account
   // req.session.rpx has social profile information
   newUser: function(req, res, next) {
      if (req.session.user) {
         // this person hit reload like a numbnuts
         res.render('newAccount.jade', {
            title: 'Welcome to Congrefs' ,
            user: req.session.user
         });
      } else {
         // go
         var input = req.session.rpx;
         var user = new User({
            displayName: input.displayName,
            email: req.session.email
         });
         user.socialProfiles.push(input);

         user.save(function(err, data) {
            if (err) { next(err); }
            req.session.user = data;
            res.render('newAccount.jade', {
               title: 'Welcome to Congrefs' ,
               user: data
            });
         });
      }
   },

   // app.get('/register/district');
   district: function(req, res, next) {
      res.render('template.jade', {
         title: 'Congrefs - Input Congressional District',
         user: req.session.user
      });   
   },

   /**
    * These functions are for account management
    */
    // app.get('/account/view')
   viewAccount: function(req, res, next) {
      res.render('template.jade', {
         title: 'Your Congrefs Account',
         user: req.session.user
      });   
   },

   // app.post('/account/edit')
   editAccount: function(req, res, next) {
      res.end('Under Construction');
   },

   // app.get('/account/votes')
   viewMyVotes: function(req, res, next) {
      res.render('template.jade', {
         title: 'Your Congrefs Voting Record',
         user: req.session.user
      });   
   },

   // app.get('/account/comments')
   viewMyComments: function(req, res, next) {
      res.render('template.jade', {
         title: 'Your Congrefs Comment History',
         user: req.session.user
      });   
   }
};